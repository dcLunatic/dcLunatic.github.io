<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dcLunatic.github.io/"/>
  <updated>2018-08-28T14:07:04.920Z</updated>
  <id>http://dcLunatic.github.io/</id>
  
  <author>
    <name>dcLunatic</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java-reflect</title>
    <link href="http://dcLunatic.github.io/2018/08/28/java-reflect/"/>
    <id>http://dcLunatic.github.io/2018/08/28/java-reflect/</id>
    <published>2018-08-28T14:05:05.000Z</published>
    <updated>2018-08-28T14:07:04.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java反射"><a href="#java反射" class="headerlink" title="java反射"></a>java反射</h1><p>[TOC]<br>反射:能够分析类能力的程序叫做反射。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java反射机制在运行状态中，也就是说是动态的，对于任意一个类，都可以知道这个类的所有属性和方法；对于任意一个对象，都可以调用它任意一个方法和属性，这种动态获取的信息以及动态调用对象的方法的功能称为反射机制。</p><blockquote><p>在Java中，在运行时识别对象和类的信息的方式主要有两种，一种是传统的<strong>RTTI(Run-Time Type Identification运行时类型识别)</strong>，它假定我们在编译时已经知道了所有的类型信息，编译器在编译时打开和检查.class文件；另外一种就是<strong>反射机制</strong>了，它允许我们在运行时发现和使用类的信息，运行时会打开和检查.class文件。反射也是一种RTTI的方式。</p></blockquote><h2 id="瞎扯"><a href="#瞎扯" class="headerlink" title="瞎扯"></a>瞎扯</h2><h3 id="Class对象"><a href="#Class对象" class="headerlink" title="Class对象"></a>Class对象</h3><p>类型信息，在Java中，主要是通过Class对象来保存的，它包含了与类有关的信息。Java使用Class对象来执行RTTI。每一个类都会产生一个对应的Class对象，也就是保存在.class文件。所有的类都是在对其第一次使用时，动态加载到JVM的，当程序创建一个对类的静态成员的引用时，就会加载这个类。Class对象仅在需要的时候才会加载，static初始化就是在类加载时进行的。类加载器首先会检查这个类的Class对象是否已经备加载过，如果尚未加载，默认的类加载器就会根据类型查找对应的.class文件。</p><p>想要在运行时使用类型信息，必须获取对象的Class对象的引用（可以通过Class.forName方法获得，或者使用.class获得等，两者有所差别，前者会自动初始化Class对象，后者不会）</p><p>在使用类之前，需要</p><ul><li>加载：由类加载器找到对应的字节码，创建一个Class对象；</li><li>链接：验证类中的字节码，为静态域分配空间；</li><li>初始化：如果该类有超类，则对其初始化，执行静态初始化器和静态初始化块。</li></ul><h2 id="传统的RTTI"><a href="#传统的RTTI" class="headerlink" title="传统的RTTI"></a>传统的RTTI</h2><p>严格的说，反射也是一种形式的RTTI，不过，一般的文档资料中把RTTI和反射分开，因为一般的，大家认为RTTI指的是传统的RTTI，通过继承和多态来实现，在运行时通过调用超类的方法来实现具体的功能（超类会自动实例化为子类，或使用instance of）。</p><p>传统的RTTI有3种实现方式：</p><ul><li>向上转型或向下转型（upcasting and downcasting），在java中，向下转型（父类转成子类）需要强制类型转换</li><li>Class对象（用了Class对象，不代表就是反射，如果只是用Class对象cast成指定的类，那就还是传统的RTTI）</li><li>instanceof或isInstance()</li></ul><p>传统的RTTI与反射最主要的区别，在于RTTI在编译期需要.class文件，而反射不需要。传统的RTTI使用转型或Instance形式实现，但都需要指定要转型的类型，比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">    Double d = (Double)o;</span><br><span class="line">    <span class="comment">//这里在编译时，就需要知道被转成的类型Double，也就是需要Double的.class文件。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射有的时候页成为内省(Introspection)，而事实上，反射就是内省的一种方式，Java不允许在运行时改变程序结构或者类型变量的结构，但允许在运行时去探知，加载调用编译时完全未知的class，可以在运行时加载该class，生成实例对象等等。实现主要是结合了Class类和reflect包。至于反射的api以及使用方法，直接查看API就好了。</p><h2 id="反射的性能"><a href="#反射的性能" class="headerlink" title="反射的性能"></a>反射的性能</h2><p>反射机制给予Java开发很大的灵活性，但反射机制本身也有缺点，代表性的缺陷就是反射的性能，一般来说，通过反射调用方法的效率比直接调用的效率要至少慢一倍以上。</p><h2 id="反射与设计模式"><a href="#反射与设计模式" class="headerlink" title="反射与设计模式"></a>反射与设计模式</h2><p>反射的一个很重要的作用，就是在设计模式中的应用，包括在工厂模式和代理模式中的应用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java反射&quot;&gt;&lt;a href=&quot;#java反射&quot; class=&quot;headerlink&quot; title=&quot;java反射&quot;&gt;&lt;/a&gt;java反射&lt;/h1&gt;&lt;p&gt;[TOC]&lt;br&gt;反射:能够分析类能力的程序叫做反射。&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="java" scheme="http://dcLunatic.github.io/tags/java/"/>
    
      <category term="反射" scheme="http://dcLunatic.github.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>linux-du</title>
    <link href="http://dcLunatic.github.io/2018/08/28/linux-du/"/>
    <id>http://dcLunatic.github.io/2018/08/28/linux-du/</id>
    <published>2018-08-28T13:35:17.000Z</published>
    <updated>2018-08-28T13:44:35.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="du命令"><a href="#du命令" class="headerlink" title="du命令"></a>du命令</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>du命令是用来查看使用空间的，但是对文件和目录磁盘使用空间情况的查看，与df命令不同</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>df [选项] [文件]/目录]</p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><ul><li>-a –all 显示目录中所有文件的大小</li><li>-b –bytes 以bytes为单位</li><li>-k –kilobytes 以KB为单位</li><li>-m –megabytes 以MB为单位</li><li>-h –human-readable 以K/M/G为单位，提高阅读性</li><li>-H –si 与-h参数一样，换算单位为1000</li><li>-c –total 除了显示个别目录或文件的大小，同时也显示所有目录或文件的总和</li><li>-s –summarize 仅显示总计，只列出最后加总的值</li><li>-S –separate-dirs 显示个别目录大小时，并不含其子目录的大小</li><li>-x –one-file-system 以一开始处理的文件系统为准，不显示过程中遇到的其他文件系统</li><li>–max-depth 向下的最大遍历层数</li><li>-L&lt;符号链接&gt;或–dereference&lt;符号链接&gt; 显示选项中所指定符号链接的源文件大小</li><li>-l或–count-links   重复计算硬件链接的文件</li></ul><h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><ol><li>显示目录或者文件所占空间</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@dcLunatic:~/Desktop/JavaTest# du</span><br><span class="line">3092./IO/IO_Analysis</span><br><span class="line">15476./IO</span><br><span class="line">192./net/心疼</span><br><span class="line">424./net</span><br><span class="line">36./regex</span><br><span class="line">16020.</span><br></pre></td></tr></table></figure><blockquote><p>只显示当前目录下面的子目录的目录大小和当前目录的总的大小，最下面的16020为当前目录的总大小</p></blockquote><ol start="2"><li>显示指定文件或目录所占空间</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@dcLunatic:~/Desktop/JavaTest# du SyncDemo.java</span><br><span class="line">4SyncDemo.java</span><br><span class="line">root@dcLunatic:~/Desktop/JavaTest# </span><br><span class="line">root@dcLunatic:~/Desktop/JavaTest# du *.java</span><br><span class="line">4CreateClass.java</span><br><span class="line">4Run.java</span><br><span class="line">4SyncDemo.java</span><br><span class="line">4Test.java</span><br><span class="line">4ThreadTest.java</span><br><span class="line">root@dcLunatic:~/Desktop/JavaTest# </span><br><span class="line">root@dcLunatic:~/Desktop/JavaTest# du IO</span><br><span class="line">3092IO/IO_Analysis</span><br><span class="line">15476IO</span><br></pre></td></tr></table></figure><ol start="3"><li>只显示总和大小</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@dcLunatic:~/Desktop/JavaTest# du -sh</span><br><span class="line">16M.</span><br></pre></td></tr></table></figure><ol start="4"><li>文件目录都显示</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">root@dcLunatic:~/Desktop/JavaTest/net# du -ah</span><br><span class="line">4.0K./URLTest.java~</span><br><span class="line">156K./picture.jpg</span><br><span class="line">8.0K./MyPictureTool.class</span><br><span class="line">4.0K./URITest1.java</span><br><span class="line">4.0K./InetAddressTest.java~</span><br><span class="line">8.0K./MyPictureTool.java</span><br><span class="line">36K./心疼/4.jpg</span><br><span class="line">48K./心疼/5.jpg</span><br><span class="line">32K./心疼/1.gif</span><br><span class="line">16K./心疼/6.gif</span><br><span class="line">16K./心疼/2.jpg</span><br><span class="line">40K./心疼/3.gif</span><br><span class="line">192K./心疼</span><br><span class="line">4.0K./URITest2.java</span><br><span class="line">4.0K./URLEncoderTest.class</span><br><span class="line">4.0K./URLTest.java</span><br><span class="line">0./URITest2.java~</span><br><span class="line">4.0K./URLTest.class</span><br><span class="line">4.0K./InetAddressTest.class</span><br><span class="line">4.0K./URITest2.class</span><br><span class="line">4.0K./URITest1.class</span><br><span class="line">8.0K./MyPictureTool.java~</span><br><span class="line">4.0K./URLEncoderTest.java</span><br><span class="line">0./URITest1.java~</span><br><span class="line">4.0K./InetAddressTest.java</span><br><span class="line">424K.</span><br></pre></td></tr></table></figure><ol start="5"><li>显示多个文件或目录，同时计算它们占用的空间总和</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@dcLunatic:~/Desktop/JavaTest# du *.java -ch</span><br><span class="line">4.0KCreateClass.java</span><br><span class="line">4.0KRun.java</span><br><span class="line">4.0KSyncDemo.java</span><br><span class="line">4.0KTest.java</span><br><span class="line">4.0KThreadTest.java</span><br><span class="line">20Ktotal</span><br></pre></td></tr></table></figure><ol start="6"><li>指定最大一层的递归搜索</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@dcLunatic:~/Desktop# du --max-depth=1 -h</span><br><span class="line">38M./PY</span><br><span class="line">12G./我的手机</span><br><span class="line">748K./Java</span><br><span class="line">16M./JavaTest</span><br><span class="line">48K./LinuxCommand</span><br><span class="line">16K./肉类详解</span><br><span class="line">12G.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;du命令&quot;&gt;&lt;a href=&quot;#du命令&quot; class=&quot;headerlink&quot; title=&quot;du命令&quot;&gt;&lt;/a&gt;du命令&lt;/h1&gt;&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h
      
    
    </summary>
    
    
      <category term="linux" scheme="http://dcLunatic.github.io/tags/linux/"/>
    
      <category term="command" scheme="http://dcLunatic.github.io/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>linux-df</title>
    <link href="http://dcLunatic.github.io/2018/08/28/linux-df/"/>
    <id>http://dcLunatic.github.io/2018/08/28/linux-df/</id>
    <published>2018-08-28T13:34:17.000Z</published>
    <updated>2018-08-28T13:44:41.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>linux中df命令的功能是用来检查该系统已挂载的文件系统的空间占用情况。可以使用该命令来获取硬盘占用了多少空间，还剩多少空间等信息。如果该命令使用时，没有指定任何文件名，则默认是当前所有已挂载了的文件系统的可用空间将被显示。默认情况下，单位是1KB，当然，也可以利用环境变量POSIXLY_CORRECT指定。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>df [选项] [参数]</p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><ul><li>-a 全部文件系统列表</li><li>-h 方便阅读方式显示</li><li>-H 等同于-h，但是计算式是1K=1000</li><li>-i 显示inode信息，linux采用了类似指针的方式管理磁盘空间影射</li><li>-k 区块为1024字节，即1K</li><li>-l 只显示本地文件系统，如果服务器nfs了远程服务器的磁盘,那么在df上加上-l后系统显示的是过滤nsf驱动器后的结果</li><li>-m 区块为1024 * 1024 = 1048576字节，即1M</li><li>–no-sync 忽略sync命令</li><li>-P 输出格式为POSIX</li><li>–sync 在取得磁盘信息前，先执行sync命令</li><li>-T 列出文件系统类型</li></ul><ul><li>–block-size=&lt;区块大小&gt; 指定区块大小</li><li>-t&lt;文件系统类型&gt; 只显示选定文件系统的磁盘信息</li><li>-x&lt;文件系统类型&gt; 不显示选定文件系统的磁盘信息</li><li>–help 显示帮助信息</li><li>–version 显示版本信息</li></ul><h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><ol><li>显示磁盘使用情况</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@dcLunatic:~# df</span><br><span class="line">Filesystem     1K-blocks     Used Available Use% Mounted on</span><br><span class="line">udev             1945008        0   1945008   0% /dev</span><br><span class="line">tmpfs             392676    12096    380580   4% /run</span><br><span class="line">/dev/sda2      118016904 80682300  31296640  73% /</span><br><span class="line">tmpfs            1963376   216364   1747012  12% /dev/shm</span><br><span class="line">tmpfs               5120        4      5116   1% /run/lock</span><br><span class="line">tmpfs            1963376        0   1963376   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1         523248      132    523116   1% /boot/efi</span><br><span class="line">tmpfs             392672       16    392656   1% /run/user/131</span><br><span class="line">tmpfs             392672       76    392596   1% /run/user/0</span><br><span class="line">/dev/mmcblk0p1  15549952  6555200   8994752  43% /media/root/AEB8-0F90</span><br><span class="line">/dev/sdb2      609747072 64171404 545575668  11% /media/root/本地磁盘</span><br></pre></td></tr></table></figure><ol start="2"><li>以inode模式来显示磁盘使用情况</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@dcLunatic:~# df -i</span><br><span class="line">Filesystem        Inodes  IUsed     IFree IUse% Mounted on</span><br><span class="line">udev              486252    485    485767    1% /dev</span><br><span class="line">tmpfs             490844    891    489953    1% /run</span><br><span class="line">/dev/sda2        7528448 686858   6841590   10% /</span><br><span class="line">tmpfs             490844    253    490591    1% /dev/shm</span><br><span class="line">tmpfs             490844      4    490840    1% /run/lock</span><br><span class="line">tmpfs             490844     16    490828    1% /sys/fs/cgroup</span><br><span class="line">/dev/sda1              0      0         0     - /boot/efi</span><br><span class="line">tmpfs             490844     25    490819    1% /run/user/131</span><br><span class="line">tmpfs             490844     46    490798    1% /run/user/0</span><br><span class="line">/dev/mmcblk0p1         0      0         0     - /media/root/AEB8-0F90</span><br><span class="line">/dev/sdb2      545641204     35 545641169    1% /media/root/本地磁盘</span><br></pre></td></tr></table></figure><ol start="3"><li>显示ext4类型的磁盘使用情况</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@dcLunatic:~# df -t ext4</span><br><span class="line">Filesystem     1K-blocks     Used Available Use% Mounted on</span><br><span class="line">/dev/sda2      118016904 80682408  31296532  73% /</span><br></pre></td></tr></table></figure><ol start="4"><li>显示除了ext4类型的磁盘的使用情况</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@dcLunatic:~# df -x ext4</span><br><span class="line">Filesystem     1K-blocks     Used Available Use% Mounted on</span><br><span class="line">udev             1945008        0   1945008   0% /dev</span><br><span class="line">tmpfs             392676    17008    375668   5% /run</span><br><span class="line">tmpfs            1963376   222868   1740508  12% /dev/shm</span><br><span class="line">tmpfs               5120        4      5116   1% /run/lock</span><br><span class="line">tmpfs            1963376        0   1963376   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1         523248      132    523116   1% /boot/efi</span><br><span class="line">tmpfs             392672       16    392656   1% /run/user/131</span><br><span class="line">tmpfs             392672       76    392596   1% /run/user/0</span><br><span class="line">/dev/mmcblk0p1  15549952  6555200   8994752  43% /media/root/AEB8-0F90</span><br><span class="line">/dev/sdb2      609747072 64171404 545575668  11% /media/root/本地磁盘</span><br></pre></td></tr></table></figure><ol start="5"><li>显示/root目录所在的文件系统的使用情况，并以更容易阅读的方式显示</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@dcLunatic:~# df /root -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/sda2       113G   77G   30G  73% /</span><br></pre></td></tr></table></figure><ol start="6"><li>列出文件系统的类型</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@dcLunatic:~# df -Th</span><br><span class="line">Filesystem     Type      Size  Used Avail Use% Mounted on</span><br><span class="line">udev           devtmpfs  1.9G     0  1.9G   0% /dev</span><br><span class="line">tmpfs          tmpfs     384M   17M  367M   5% /run</span><br><span class="line">/dev/sda2      ext4      113G   77G   30G  73% /</span><br><span class="line">tmpfs          tmpfs     1.9G  223M  1.7G  12% /dev/shm</span><br><span class="line">tmpfs          tmpfs     5.0M  4.0K  5.0M   1% /run/lock</span><br><span class="line">tmpfs          tmpfs     1.9G     0  1.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1      vfat      511M  132K  511M   1% /boot/efi</span><br><span class="line">tmpfs          tmpfs     384M   16K  384M   1% /run/user/131</span><br><span class="line">tmpfs          tmpfs     384M   76K  384M   1% /run/user/0</span><br><span class="line">/dev/mmcblk0p1 vfat       15G  6.3G  8.6G  43% /media/root/AEB8-0F90</span><br><span class="line">/dev/sdb2      fuseblk   582G   62G  521G  11% /media/root/本地磁盘</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;df命令&quot;&gt;&lt;a href=&quot;#df命令&quot; class=&quot;headerlink&quot; title=&quot;df命令&quot;&gt;&lt;/a&gt;df命令&lt;/h1&gt;&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h
      
    
    </summary>
    
    
      <category term="linux" scheme="http://dcLunatic.github.io/tags/linux/"/>
    
      <category term="command" scheme="http://dcLunatic.github.io/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>linux-dd</title>
    <link href="http://dcLunatic.github.io/2018/08/28/linux-dd/"/>
    <id>http://dcLunatic.github.io/2018/08/28/linux-dd/</id>
    <published>2018-08-28T13:32:56.000Z</published>
    <updated>2018-08-28T13:45:31.217Z</updated>
    
    <content type="html"><![CDATA[<p>dd命令(转载复制粘贴)</p><p>linux下dd命令详解</p><p>   名称: dd </p><p>使用权限: 所有使用者dd 这个指令在 manual 里的定义是 convert and copy a file </p><p>使用方式: </p><p>dd [option] </p><p>如果你想要在线看 manual, 可以试试: </p><p>dd –help </p><p>或是 </p><p>info dd </p><p>如果你想要看看这个版本如何: </p><p>dd –version </p><p>输入或输出 </p><p>dd if=[STDIN] of=[STDOUT] </p><p>强迫输入或输出的Size为多少Bytes </p><p>bs: dd -ibs=[BYTE] -obs=[SIZE] </p><p>强迫一次只做多少个 Bytes </p><p>cbs=BYTES </p><p>跳过一段以后才输出 </p><p>seek=BLOCKS </p><p>跳过一段以后才输入 </p><p>skip=BLOCKS </p><p>当然你可以拿这个来方便的拷贝光碟(注意，你的光碟是标准的 iso9660格式才可以这么做唷！) </p><p>dd if=/dev/cdrom of=cdrom.iso </p><p>其中 if 后面以及 of 后面的内容依你的需求调整。 </p><p>然后给系统这个指令就可以烧了: </p><p>cdrecord -v cdrom.iso </p><p>这篇不是在讲 cdrecord 的，所以上面的指令是最为简单但是不一定能符合您的硬件环境…</p><p>功能：把指定的输入文件拷贝到指定的输出文件中，并且在拷贝过程中可以进行格式转换。可以用该命令实现DOS下的diskcopy命令的作用。先用dd命令把软盘上的数据写成硬盘的一个寄存文件，再把这个寄存文件写入第二张软盘上，完成diskcopy的功能。需要注意的是，应该将硬盘上的寄存文件用rm命令删除掉。系统默认使用标准输入文件和标准输出文件。 </p><p>语法：dd [选项] </p><p>if =输入文件（或设备名称）。 </p><p>of =输出文件（或设备名称）。 </p><p>ibs = bytes 一次读取bytes字节，即读入缓冲区的字节数。 </p><p>skip = blocks 跳过读入缓冲区开头的ibs*blocks块。 </p><p>obs = bytes 一次写入bytes字节，即写入缓冲区的字节数。 </p><p>bs = bytes 同时设置读/写缓冲区的字节数（等于设置ibs和obs）。 </p><p>cbs = byte 一次转换bytes字节。 </p><p>count=blocks 只拷贝输入的blocks块。 </p><p>conv = ASCII 把EBCDIC码转换为ASCIl码。 </p><p>conv = ebcdic 把ASCIl码转换为EBCDIC码。 </p><p>conv = ibm 把ASCIl码转换为alternate EBCDIC码。 </p><p>conv = block 把变动位转换成固定字符。 </p><p>conv = ublock 把固定位转换成变动位。 </p><p>conv = ucase 把字母由小写转换为大写。 </p><p>conv = lcase 把字母由大写转换为小写。 </p><p>conv = notrunc 不截短输出文件。 </p><p>conv = swab 交换每一对输入字节。 </p><p>conv = noerror 出错时不停止处理。 </p><p>conv = sync 把每个输入记录的大小都调到ibs的大小（用NUL填充）。 </p><p>例1：要把一张软盘的内容拷贝到另一张软盘上，利用/tmp作为临时存储区。把源盘插入驱动器中，输入下述命令： </p><p>$ dd if =/dev/fd0 of = /tmp/tmpfile </p><p>拷贝完成后，将源盘从驱动器中取出，把目标盘插入，输入命令： </p><p>$ dd if = /tmp/tmpfile of =/dev/fd0 </p><p>软盘拷贝完成后，应该将临时文件删除： </p><p>$ rm /tmp/tmpfile </p><p>例2：把net.i这个文件写入软盘中，并设定读/写缓冲区的数目。 </p><p>（注意：软盘中的内容会被完全覆盖掉） </p><p>$ dd if = net.i of = /dev/fd0 bs = 16384 </p><p>例3：将文件sfile拷贝到文件 dfile中。 </p><p>$ dd if=sfile of=dfile</p><hr><p>dd 是 Linux/UNIX 下的一个非常有用的命令，作用是用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换。</p><p>dd 的主要选项：</p><p>指定数字的地方若以下列字符结尾乘以相应的数字:</p><p>b=512, c=1, k=1024, w=2, xm=number m</p><p>if=file</p><p>输入文件名，缺省为标准输入。</p><p>of=file</p><p>输出文件名，缺省为标准输出。</p><p>ibs=bytes</p><p>一次读入 bytes 个字节(即一个块大小为 bytes 个字节)。</p><p>obs=bytes</p><p>一次写 bytes 个字节(即一个块大小为 bytes 个字节)。</p><p>bs=bytes</p><p>同时设置读写块的大小为 bytes ，可代替 ibs 和 obs 。</p><p>cbs=bytes</p><p>一次转换 bytes 个字节，即转换缓冲区大小。</p><p>skip=blocks</p><p>从输入文件开头跳过 blocks 个块后再开始复制。</p><p>seek=blocks</p><p>从输出文件开头跳过 blocks 个块后再开始复制。(通常只有当输出文件是磁盘或磁带时才有效)</p><p>count=blocks</p><p>仅拷贝 blocks 个块，块大小等于 ibs 指定的字节数。</p><p>conv=conversion[,conversion…]</p><p>用指定的参数转换文件。</p><p>转换参数:</p><p>ascii 转换 EBCDIC 为 ASCII。</p><p>ebcdic 转换 ASCII 为 EBCDIC。</p><p>ibm 转换 ASCII 为 alternate EBCDIC.</p><p>block 把每一行转换为长度为 cbs 的记录，不足部分用空格填充。</p><p>unblock</p><p>使每一行的长度都为 cbs ，不足部分用空格填充。</p><p>lcase 把大写字符转换为小写字符。</p><p>ucase 把小写字符转换为大写字符。</p><p>swab 交换输入的每对字节。 Unlike the</p><p>Unix dd, this works when an odd number of</p><p>bytes are read. If the input file contains</p><p>an odd number of bytes, the last byte is</p><p>simply copied (since there is nothing to</p><p>swap it with).</p><p>noerror</p><p>出错时不停止。</p><p>notrunc</p><p>不截短输出文件。</p><p>sync 把每个输入块填充到ibs个字节，不足部分用空(NUL)字符补齐。</p><p>由于 dd 命令允许二进制方式读写，所以特别适合在原始物理设备上进行输入/输出。例如可以用下面的命令为软盘建立镜像文件：</p><p>dd if=/dev/fd0 of=disk.img bs=1440k</p><p>有趣的是，这个镜像文件能被 HD-Copy ，Winimage 等工具软件读出。再如把第一个硬盘的前 512 个字节存为一个文件：</p><p>dd if=/dev/hda of=disk.mbr bs=512 count=1 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;dd命令(转载复制粘贴)&lt;/p&gt;
&lt;p&gt;linux下dd命令详解&lt;/p&gt;
&lt;p&gt;   名称: dd &lt;/p&gt;
&lt;p&gt;使用权限: 所有使用者dd 这个指令在 manual 里的定义是 convert and copy a file &lt;/p&gt;
&lt;p&gt;使用方式: &lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="linux" scheme="http://dcLunatic.github.io/tags/linux/"/>
    
      <category term="command" scheme="http://dcLunatic.github.io/tags/command/"/>
    
      <category term="拷贝烧录" scheme="http://dcLunatic.github.io/tags/%E6%8B%B7%E8%B4%9D%E7%83%A7%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>linux-bc</title>
    <link href="http://dcLunatic.github.io/2018/08/28/linux-bc/"/>
    <id>http://dcLunatic.github.io/2018/08/28/linux-bc/</id>
    <published>2018-08-28T13:31:42.000Z</published>
    <updated>2018-08-28T13:44:56.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bc命令"><a href="#bc命令" class="headerlink" title="bc命令"></a>bc命令</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Bash内置了对整数四则运算的支持，但是并不支持浮点运算，而bc命令可以很方便的进行浮点运算，当然整数运算也不再话下。手册页上说bc是An arbitrary precision calculator language，即一个任意精度的计算语言，注意是一种语言，它提供了一些语法结构，比如条件判断、循环等，可以说是很强大的，但是一般用不着 。另外一个用途就是用来进行进制转换。</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>bc [选项] [文件]</p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><ul><li>-h –help 输出帮助信息</li><li>-l –mathlib 使用数学库</li><li>-q –quiet 安静模式</li><li>-v –version 输出版本信息</li></ul><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>在bc默认的工作环境下，可以使用以下计算符号:<code>+，-，*，/，^，%</code>，当然还有一些常见的开方<code>sqrt</code>，默认的保留的小位数是0位，可以使用scale，多个计算式或者声明式可以使用分号;隔开。</p><p>进制转换时，可以使用ibase设置输入的进制，使用obase设置输出的进制。在大于十进制时要使用大写的字母A-Z，而不是小写的。</p><blockquote><p>ibase 和 obase的数值进制也是ibase中设置的，默认是十进制，下面有举了个栗子。</p></blockquote><h3 id="交互式使用"><a href="#交互式使用" class="headerlink" title="交互式使用"></a>交互式使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">root@dcLunatic:~# bc</span><br><span class="line">bc 1.07.1</span><br><span class="line">Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006, 2008, 2012-2017 Free Software Foundation, Inc.</span><br><span class="line">This is free software with ABSOLUTELY NO WARRANTY.</span><br><span class="line">For details type `warranty'. </span><br><span class="line">3+2</span><br><span class="line">5</span><br><span class="line">5*2</span><br><span class="line">10</span><br><span class="line">98/12</span><br><span class="line">8</span><br><span class="line">34 % 3</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">scale=3</span><br><span class="line">5/3</span><br><span class="line">1.666</span><br><span class="line">ibase=10</span><br><span class="line">obase=16</span><br><span class="line">256</span><br><span class="line">100</span><br><span class="line">234</span><br><span class="line">EA</span><br><span class="line">ibase=16</span><br><span class="line">obase=10</span><br><span class="line">EADB</span><br><span class="line">EADB</span><br><span class="line">obase=A</span><br><span class="line">EADB</span><br><span class="line">60123</span><br></pre></td></tr></table></figure><p>在bc命令后面也可以接文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@dcLunatic:~# bc calc.txt</span><br><span class="line">bc 1.07.1</span><br><span class="line">Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006, 2008, 2012-2017 Free Software Foundation, Inc.</span><br><span class="line">This is free software with ABSOLUTELY NO WARRANTY.</span><br><span class="line">For details type `warranty'. </span><br><span class="line">6</span><br><span class="line">223</span><br><span class="line">41</span><br><span class="line">112</span><br><span class="line">0</span><br><span class="line">1.10000000</span><br></pre></td></tr></table></figure><p>注: 使用quit或Ctrl+D或者直接Ctrl+C都可以退出bc命令。</p><h3 id="管道使用bc"><a href="#管道使用bc" class="headerlink" title="管道使用bc"></a>管道使用bc</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@dcLunatic:~# echo "1+2" | bc</span><br><span class="line">3</span><br><span class="line">root@dcLunatic:~# echo "(3*7)*3.2;23*23" | bc</span><br><span class="line">67.2</span><br><span class="line">529</span><br><span class="line">root@dcLunatic:~# echo "obase=16;34"|bc</span><br><span class="line">22</span><br><span class="line">root@dcLunatic:~# echo "sqrt(7)" | bc</span><br><span class="line">2</span><br><span class="line">root@dcLunatic:~# echo "scale=4;sqrt(8)" | bc</span><br><span class="line">2.8284</span><br></pre></td></tr></table></figure><p>也可以这样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@dcLunatic:~# cat calc.txt</span><br><span class="line">2+4</span><br><span class="line">ibase=2;obase=5;9*7</span><br><span class="line">3*7</span><br><span class="line">4*8</span><br><span class="line">5/9</span><br><span class="line">scale=5;6/5</span><br><span class="line">root@dcLunatic:~# cat calc.txt | bc</span><br><span class="line">6</span><br><span class="line">223</span><br><span class="line">41</span><br><span class="line">112</span><br><span class="line">0</span><br><span class="line">1.10000000</span><br></pre></td></tr></table></figure><h3 id="高级用法，bc命令的脚本片段结合bash"><a href="#高级用法，bc命令的脚本片段结合bash" class="headerlink" title="高级用法，bc命令的脚本片段结合bash"></a>高级用法，bc命令的脚本片段结合bash</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@dcLunatic:~# calc_sum()</span><br><span class="line"><span class="meta">&gt;</span> &#123;</span><br><span class="line"><span class="meta">&gt;</span> bc -q &lt;&lt; EOF</span><br><span class="line"><span class="meta">&gt;</span> 0.05*$1</span><br><span class="line"><span class="meta">&gt;</span> EOF</span><br><span class="line"><span class="meta">&gt;</span> &#125;</span><br><span class="line">root@dcLunatic:~# </span><br><span class="line">root@dcLunatic:~# calc_sum 3</span><br><span class="line">.15</span><br><span class="line">root@dcLunatic:~# calc_sum 89</span><br><span class="line">4.45</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;bc命令&quot;&gt;&lt;a href=&quot;#bc命令&quot; class=&quot;headerlink&quot; title=&quot;bc命令&quot;&gt;&lt;/a&gt;bc命令&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h
      
    
    </summary>
    
    
      <category term="linux" scheme="http://dcLunatic.github.io/tags/linux/"/>
    
      <category term="command" scheme="http://dcLunatic.github.io/tags/command/"/>
    
      <category term="calculate" scheme="http://dcLunatic.github.io/tags/calculate/"/>
    
  </entry>
  
  <entry>
    <title>linux-iconv</title>
    <link href="http://dcLunatic.github.io/2018/08/28/linux-iconv/"/>
    <id>http://dcLunatic.github.io/2018/08/28/linux-iconv/</id>
    <published>2018-08-28T13:20:24.000Z</published>
    <updated>2018-08-28T13:44:16.765Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iconv命令"><a href="#iconv命令" class="headerlink" title="iconv命令"></a>iconv命令</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p><code>iconv</code>命令是用来转换文件的编码方式的，比如它可以把utf-8编码的转换成gb18030编码，当然，反过来也是可以的 。jdk中也提供了类似的工具<code>native2ascii</code>。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>iconv -f encoding [-t encoding] [inputfile]...</code></p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><ul><li>-f encoding: 把字符从encoding编码开始转换</li><li>-t encoding: 把字符转换到encoding编码</li><li>-l: 列出已知的编码字符集合</li><li>-o file: 指定输出文件，如果不指定，则在当前窗口输出。</li><li>-c: 忽略输出的非法字符</li><li>-s: 禁止警告信息，但是不是错误信息</li><li>–verbose: 显示进度信息</li><li>-?/–help: 显示帮助信息</li></ul><h2 id="帮助信息"><a href="#帮助信息" class="headerlink" title="帮助信息"></a>帮助信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Usage: iconv [OPTION...] [FILE...]</span><br><span class="line">Convert encoding of given files from one encoding to another.</span><br><span class="line"></span><br><span class="line"> Input/Output format specification:</span><br><span class="line">  -f, --from-code=NAME       encoding of original text</span><br><span class="line">  -t, --to-code=NAME         encoding for output</span><br><span class="line"></span><br><span class="line"> Information:</span><br><span class="line">  -l, --list                 list all known coded character sets</span><br><span class="line"></span><br><span class="line"> Output control:</span><br><span class="line">  -c                         omit invalid characters from output</span><br><span class="line">  -o, --output=FILE          output file</span><br><span class="line">  -s, --silent               suppress warnings</span><br><span class="line">      --verbose              print progress information</span><br><span class="line"></span><br><span class="line">  -?, --help                 Give this help list</span><br><span class="line">      --usage                Give a short usage message</span><br><span class="line">  -V, --version              Print program version</span><br><span class="line"></span><br><span class="line">Mandatory or optional arguments to long options are also mandatory or optional</span><br><span class="line">for any corresponding short options.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;iconv命令&quot;&gt;&lt;a href=&quot;#iconv命令&quot; class=&quot;headerlink&quot; title=&quot;iconv命令&quot;&gt;&lt;/a&gt;iconv命令&lt;/h1&gt;&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作
      
    
    </summary>
    
    
      <category term="linux" scheme="http://dcLunatic.github.io/tags/linux/"/>
    
      <category term="command" scheme="http://dcLunatic.github.io/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>linux-od</title>
    <link href="http://dcLunatic.github.io/2018/08/28/linux-od/"/>
    <id>http://dcLunatic.github.io/2018/08/28/linux-od/</id>
    <published>2018-08-28T13:16:21.000Z</published>
    <updated>2018-08-28T13:43:59.258Z</updated>
    
    <content type="html"><![CDATA[<h2 id="od"><a href="#od" class="headerlink" title="od"></a>od</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>od 命令用于将文件内容以八进制、十进制、十六进制、浮点格式或ASCII编码字符方式显示，通常用于显示或查看文件中不能直接显示在终端的字符。默认显示方式是八进制，名称源于Octal Dump。</p><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>od [&lt;选项&gt;|&lt;参数&gt;] [&lt;文件名&gt;]</code></p><h3 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h3><ul><li>A<radix>,–address-radix=RADIX:选择以何种基数表示地址偏移，可选基数有: d(decimal) o(octal) x(hexadecimal) n(none)</radix></li><li>-j<bytes>,–skip-bytes=BYTES:跳过指定数目的字节</bytes></li><li>-N,–read-bytes=BYTES:输出指定字节数</li><li>-S<bytes>,–strings[=BYTES]:输出长度不小于指定字节数的字符串</bytes></li><li>-v,–output-duplicates:输出时不省略重复的数据</li><li>-w<bytes>,–width=<bytes>:设置每行显示的字节数，默认是16个字节，如果该选项不加参数，则显示32个字节</bytes></bytes></li><li>-t<type>,–format=TYPE:指定输出格式，格式包括a、c、d、f、o、u和x<ul><li>a:具名字符</li><li>c:ASCII字符或者反斜杠</li><li>d[SIZE]:十进制，正负数都包含，SIZE字节组成一个十进制整数</li><li>f[SIZE]:浮点数，SIZE个字节组成一个浮点数</li><li>o[SIZE]:八进制，SIZE个字节组成一个八进制数</li><li>u[SIZE]:无符号十进制，SIZE个字节组成一个无符号十进制整数</li><li>x[SIZE]:十六进制，SIZE字节为单位组成一个十六进制数</li></ul></type></li><li>–help:在线帮助</li><li>–version:版本信息</li></ul><h3 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h3><p>文件名是可以省略的，然后通过实时输入每一行所需要的字节数目的字符后，显示输出，也可以通过管道输入</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;od&quot;&gt;&lt;a href=&quot;#od&quot; class=&quot;headerlink&quot; title=&quot;od&quot;&gt;&lt;/a&gt;od&lt;/h2&gt;&lt;h3 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h3&gt;&lt;p&gt;od 
      
    
    </summary>
    
    
      <category term="linux" scheme="http://dcLunatic.github.io/tags/linux/"/>
    
      <category term="command" scheme="http://dcLunatic.github.io/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>linux-free</title>
    <link href="http://dcLunatic.github.io/2018/08/28/linux-free/"/>
    <id>http://dcLunatic.github.io/2018/08/28/linux-free/</id>
    <published>2018-08-28T13:12:41.000Z</published>
    <updated>2018-08-28T13:44:27.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="free命令"><a href="#free命令" class="headerlink" title="free命令"></a>free命令</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>free命令可以显示Linux系统中空闲的、已用的物理内存及swap内存,及被内核使用的buffer。在Linux系统监控的工具中，free命令是最经常使用的命令之一。</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>free [选项]</p><h2 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h2><ul><li>-b 以Byte为单位显示内存使用情况</li><li>-k 以KB为单位显示内存使用情况</li><li>-m 以MB为单位显示内存使用情况</li><li>-g 以GB为单位显示内存使用情况</li><li>-s&lt;间隔秒数&gt; 持续观察内存使用情况，每隔指定时间刷新一次</li><li>-c&lt;显示次数&gt; 以-s指定的时间间隔刷新显示指定次(默认1s)</li><li>-l 显示最高最低统计信息</li><li>-t 显示内存总和列</li><li>-V显示版本信息</li><li>-w 不显示cache缓冲区调和列</li><li>–help 帮助信息</li></ul><h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">root@dcLunatic:~# free -w</span><br><span class="line">              total        used        free      shared     buffers       cache   available</span><br><span class="line">Mem:        3926756     2412980      161048      647120      122744     1229984      572224</span><br><span class="line">Swap:       4077564      539392     3538172</span><br><span class="line">root@dcLunatic:~# free</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        3926756     2367412      202764      650948     1356580      613964</span><br><span class="line">Swap:       4077564      539392     3538172</span><br><span class="line">root@dcLunatic:~# free -l</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        3926756     2414160      156844      649888     1355752      568276</span><br><span class="line">Low:        3926756     3769912      156844</span><br><span class="line">High:             0           0           0</span><br><span class="line">Swap:       4077564      539392     3538172</span><br><span class="line">root@dcLunatic:~# free -s 2</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        3926756     2347848      230980      642984     1347928      641492</span><br><span class="line">Swap:       4077564      539392     3538172</span><br><span class="line"></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        3926756     2349916      227616      644280     1349224      638128</span><br><span class="line">Swap:       4077564      539392     3538172</span><br><span class="line"></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        3926756     2348464      226452      646880     1351840      636980</span><br><span class="line">Swap:       4077564      539392     3538172</span><br><span class="line"></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        3926756     2350080      222344      649372     1354332      632872</span><br><span class="line">Swap:       4077564      539392     3538172</span><br><span class="line"></span><br><span class="line">^C</span><br><span class="line">root@dcLunatic:~# free -c 3</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        3926756     2409828      167828      643920     1349100      578576</span><br><span class="line">Swap:       4077564      539392     3538172</span><br><span class="line"></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        3926756     2412628      162124      646824     1352004      572872</span><br><span class="line">Swap:       4077564      539392     3538172</span><br><span class="line"></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        3926756     2414612      159288      647676     1352856      570036</span><br><span class="line">Swap:       4077564      539392     3538172</span><br><span class="line">root@dcLunatic:~# free -c 3 -s 5</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        3926756     2362972      206864      651716     1356920      617636</span><br><span class="line">Swap:       4077564      539392     3538172</span><br><span class="line"></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        3926756     2312708      249220      659616     1364828      660000</span><br><span class="line">Swap:       4077564      539392     3538172</span><br><span class="line"></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        3926756     2331168      237764      652612     1357824      648544</span><br><span class="line">Swap:       4077564      539392     3538172</span><br><span class="line">root@dcLunatic:~# free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          3.7Gi       2.3Gi       170Mi       634Mi       1.3Gi       571Mi</span><br><span class="line">Swap:         3.9Gi       526Mi       3.4Gi</span><br></pre></td></tr></table></figure><h2 id="数值解释"><a href="#数值解释" class="headerlink" title="数值解释"></a>数值解释</h2><p>total:总计物理内存的大小。</p><p>used:已使用多大。</p><p>free:可用有多少。</p><p>Shared:多个进程共享的内存总额。</p><p>Buffers/cached:磁盘缓存的大小。</p><p>第三行(-/+ buffers/cached):</p><p>used:已使用多大。</p><p>free:可用有多少。</p><p>第四行是交换分区SWAP的，也就是我们通常所说的虚拟内存。</p><p>区别：第二行(mem)的used/free与第三行(-/+ buffers/cache) used/free的区别。 这两个的区别在于使用的角度来看，第一行是从OS的角度来看，因为对于OS，buffers/cached 都是属于被使用，所以他的可用内存是2098428KB,已用内存是30841684KB,其中包括，内核（OS）使用+Application(X, oracle,etc)使用的+buffers+cached.</p><p>第三行所指的是从应用程序角度来看，对于应用程序来说，buffers/cached 是等于可用的，因为buffer/cached是为了提高文件读取的性能，当应用程序需在用到内存的时候，buffer/cached会很快地被回收。</p><p>所以从应用程序的角度来说，可用内存=系统free memory+buffers+cached。</p><h2 id="交换内存"><a href="#交换内存" class="headerlink" title="交换内存"></a>交换内存</h2><p>当可用内存少于额定值的时候，就会开会进行交换.如何看额定值：</p><p><code>cat /proc/meminfo</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">MemTotal:        3926756 kB</span><br><span class="line">MemFree:          251476 kB</span><br><span class="line">MemAvailable:     687828 kB</span><br><span class="line">Buffers:           76600 kB</span><br><span class="line">Cached:          1052608 kB</span><br><span class="line">SwapCached:        49956 kB</span><br><span class="line">Active:          2515620 kB</span><br><span class="line">Inactive:         829940 kB</span><br><span class="line">Active(anon):    2148288 kB</span><br><span class="line">Inactive(anon):   581256 kB</span><br><span class="line">Active(file):     367332 kB</span><br><span class="line">Inactive(file):   248684 kB</span><br><span class="line">Unevictable:           0 kB</span><br><span class="line">Mlocked:               0 kB</span><br><span class="line">SwapTotal:       4077564 kB</span><br><span class="line">SwapFree:        3291132 kB</span><br><span class="line">Dirty:               632 kB</span><br><span class="line">Writeback:             0 kB</span><br><span class="line">AnonPages:       2037096 kB</span><br><span class="line">Mapped:           430548 kB</span><br><span class="line">Shmem:            513192 kB</span><br><span class="line">Slab:             139292 kB</span><br><span class="line">SReclaimable:      60588 kB</span><br><span class="line">SUnreclaim:        78704 kB</span><br><span class="line">KernelStack:       16944 kB</span><br><span class="line">PageTables:        73408 kB</span><br><span class="line">NFS_Unstable:          0 kB</span><br><span class="line">Bounce:                0 kB</span><br><span class="line">WritebackTmp:          0 kB</span><br><span class="line">CommitLimit:     6040940 kB</span><br><span class="line">Committed_AS:   12437320 kB</span><br><span class="line">VmallocTotal:   34359738367 kB</span><br><span class="line">VmallocUsed:           0 kB</span><br><span class="line">VmallocChunk:          0 kB</span><br><span class="line">HardwareCorrupted:     0 kB</span><br><span class="line">AnonHugePages:    423936 kB</span><br><span class="line">ShmemHugePages:        0 kB</span><br><span class="line">ShmemPmdMapped:        0 kB</span><br><span class="line">HugePages_Total:       0</span><br><span class="line">HugePages_Free:        0</span><br><span class="line">HugePages_Rsvd:        0</span><br><span class="line">HugePages_Surp:        0</span><br><span class="line">Hugepagesize:       2048 kB</span><br><span class="line">DirectMap4k:      260688 kB</span><br><span class="line">DirectMap2M:     3817472 kB</span><br><span class="line">DirectMap1G:     1048576 kB</span><br></pre></td></tr></table></figure><p>交换将通过三个途径来减少系统中使用的物理页面的个数：　 </p><p>1.减少缓冲与页面cache的大小， </p><p>2.将系统V类型的内存页面交换出去，　 </p><p>3.换出或者丢弃页面。(Application 占用的内存页，也就是物理内存不足）。 </p><p>事实上，少量地使用swap是不是影响到系统性能的。</p><p>那buffers和cached都是缓存，两者有什么区别呢？</p><p>为了提高磁盘存取效率, Linux做了一些精心的设计, 除了对dentry进行缓存(用于VFS,加速文件路径名到inode的转换), 还采取了两种主要Cache方式：Buffer Cache和Page Cache。前者针对磁盘块的读写，后者针对文件inode的读写。这些Cache有效缩短了 I/O系统调用(比如read,write,getdents)的时间。</p><p>磁盘的操作有逻辑级（文件系统）和物理级（磁盘块），这两种Cache就是分别缓存逻辑和物理级数据的。</p><p>Page cache实际上是针对文件系统的，是文件的缓存，在文件层面上的数据会缓存到page cache。文件的逻辑层需要映射到实际的物理磁盘，这种映射关系由文件系统来完成。当page cache的数据需要刷新时，page cache中的数据交给buffer cache，因为Buffer Cache就是缓存磁盘块的。但是这种处理在2.6版本的内核之后就变的很简单了，没有真正意义上的cache操作。</p><p>Buffer cache是针对磁盘块的缓存，也就是在没有文件系统的情况下，直接对磁盘进行操作的数据会缓存到buffer cache中，例如，文件系统的元数据都会缓存到buffer cache中。</p><p>简单说来，page cache用来缓存文件数据，buffer cache用来缓存磁盘数据。在有文件系统的情况下，对文件操作，那么数据会缓存到page cache，如果直接采用dd等工具对磁盘进行读写，那么数据会缓存到buffer cache。</p><p>所以我们看linux,只要不用swap的交换空间,就不用担心自己的内存太少.如果常常swap用很多,可能你就要考虑加物理内存了.这也是linux看内存是否够用的标准.</p><p>如果是应用服务器的话，一般只看第二行，+buffers/cache,即对应用程序来说free的内存太少了，也是该考虑优化程序或加内存了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;free命令&quot;&gt;&lt;a href=&quot;#free命令&quot; class=&quot;headerlink&quot; title=&quot;free命令&quot;&gt;&lt;/a&gt;free命令&lt;/h1&gt;&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="linux" scheme="http://dcLunatic.github.io/tags/linux/"/>
    
      <category term="command" scheme="http://dcLunatic.github.io/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>linux目录&#39;/proc&#39;详解</title>
    <link href="http://dcLunatic.github.io/2018/08/28/linux%E7%9B%AE%E5%BD%95-proc-%E8%AF%A6%E8%A7%A3/"/>
    <id>http://dcLunatic.github.io/2018/08/28/linux目录-proc-详解/</id>
    <published>2018-08-28T13:10:39.000Z</published>
    <updated>2018-08-28T13:43:37.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-下proc目录详解——未完"><a href="#Linux-下proc目录详解——未完" class="headerlink" title="Linux 下proc目录详解——未完"></a>Linux 下proc目录详解——未完</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>proc是linux下一个很重要的目录，它记录了一些系统的实时运行信息，跟其他的目录相比，它不是一个真正的文件系统，它存在于内存中，而不是存在于磁盘中。在这个目录中，保存了很多系统信息，比如进程信息，cpu使用信息，内存使用信息等等。/proc 文件系统提供了一个基于文件的 Linux 内部接口。它可以用于确定系统 的各种不同设备和进程的状态。</p><h2 id="一些主要文件目录的作用"><a href="#一些主要文件目录的作用" class="headerlink" title="一些主要文件目录的作用"></a>一些主要文件目录的作用</h2><ul><li><p>/proc/cpuinfo                      CPU的信息(型号，缓存等等)</p></li><li><p>/proc/meminfo                    物理内存、交换空间使用信息</p></li><li><p>/proc/mounts                      已加载的文件系统列表</p></li><li><p>/proc/devices                     可用设备列表</p></li><li><p>/proc/filesystems                被支持的文件系统</p></li><li><p>/proc/version                      内核版本</p></li><li><p>/proc/modules                    已加载的模块</p></li><li><p>/proc/cmdline                    系统启动的时候输入的内核命令参数</p></li><li><p>/proc/swaps                      交换空间的使用情况</p></li><li><p>/proc/uptime                      获取系统的运行时间</p></li><li><p>/proc/loadavg                     系统负荷信息</p></li><li><p>/proc/partitions                    磁盘设备分区信息</p></li><li><p>/proc/locks                         当前系统中的文件系统</p></li><li><p>/proc/kmsg                        作为内核日志信息源，当作一个系统信息调用的接口使用</p></li><li><p>/proc/(PID)                        每个进程PID命名的目录，记录了这个进程的一系列信息</p></li><li><p>/proc/self                          到当前进程/proc的符号链接，可以获取当前运行进程的信息</p></li><li><p>/proc/sys/kernel                内核目录</p><ul><li><p>/proc/sys/kernel/hostname        主机名</p></li><li><p>/proc/sys/kernel/domainname        域名</p></li></ul></li><li><p>/proc/sys/dev                    设备信息</p></li></ul><h2 id="进程目录"><a href="#进程目录" class="headerlink" title="进程目录"></a>进程目录</h2><ul><li>/proc/N pid为N的进程信息</li><li>/proc/N/cmdline 进程启动命令</li><li>/proc/N/cwd 链接到进程当前工作目录</li><li>/proc/N/environ 进程环境变量列表</li><li>/proc/N/exe 链接到进程的执行命令文件</li><li>/proc/N/fd 包含进程相关的所有的文件描述符</li><li>/proc/N/maps 与进程相关的内存映射信息</li><li>/proc/N/mem 指代进程持有的内存，不可读</li><li>/proc/N/root 链接到进程的根目录</li><li>/proc/N/stat 进程的状态</li><li>/proc/N/statm 进程使用的内存的状态</li><li>/proc/N/status 进程状态信息，比stat/statm更具可读性</li><li>/proc/self 链接到当前正在运行的进程</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux-下proc目录详解——未完&quot;&gt;&lt;a href=&quot;#Linux-下proc目录详解——未完&quot; class=&quot;headerlink&quot; title=&quot;Linux 下proc目录详解——未完&quot;&gt;&lt;/a&gt;Linux 下proc目录详解——未完&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
      <category term="linux" scheme="http://dcLunatic.github.io/tags/linux/"/>
    
      <category term="文件目录详解" scheme="http://dcLunatic.github.io/tags/%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E8%AF%A6%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>linux-ln</title>
    <link href="http://dcLunatic.github.io/2018/08/28/linux-ln/"/>
    <id>http://dcLunatic.github.io/2018/08/28/linux-ln/</id>
    <published>2018-08-28T13:04:32.000Z</published>
    <updated>2018-08-28T13:44:06.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ln命令"><a href="#ln命令" class="headerlink" title="ln命令"></a>ln命令</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>ln命令的作用是为某一个文件在另外一个位置建立一个同步的链接。当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个目录下放一个必须相同的文件，我们只需要在某个固定的目录，放置文件，然后在其他目录使用ln命令来链接它即可，不需要占用其他的磁盘空间。</p><h2 id="链接的分类"><a href="#链接的分类" class="headerlink" title="链接的分类"></a>链接的分类</h2><p>linux系统中，有所谓的链接，分两种：一种是软连接(symbolic link)，一种是硬链接(hard link)，硬链接的意思是一个文件可以有多个名称，而软链接是产生一个特殊的文件，或者叫档案，指向另外一个文件的位置。硬链接必须要存在同一个文件系统中，而软链接是可以跨越不同的文件系统。</p><h3 id="软链接："><a href="#软链接：" class="headerlink" title="软链接："></a>软链接：</h3><p>1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式</p><p>2.软链接可以 跨文件系统 ，硬链接不可以</p><p>3.软链接可以对一个不存在的文件名进行链接</p><p>4.软链接可以对目录进行链接</p><h3 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接:"></a>硬链接:</h3><p>1.硬链接，以文件副本的形式存在。但不占用实际空间。</p><p>2.不允许给目录创建硬链接</p><p>3.硬链接只有在同一个文件系统中才能创建</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ln命令&quot;&gt;&lt;a href=&quot;#ln命令&quot; class=&quot;headerlink&quot; title=&quot;ln命令&quot;&gt;&lt;/a&gt;ln命令&lt;/h1&gt;&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h
      
    
    </summary>
    
    
      <category term="linux" scheme="http://dcLunatic.github.io/tags/linux/"/>
    
      <category term="command" scheme="http://dcLunatic.github.io/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>top命令</title>
    <link href="http://dcLunatic.github.io/2018/08/28/linux-top/"/>
    <id>http://dcLunatic.github.io/2018/08/28/linux-top/</id>
    <published>2018-08-28T02:46:36.000Z</published>
    <updated>2018-08-28T13:43:49.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于windows的任务管理器。top是一个动态显示过程，即可以通过用户按键输入来不断的刷新当前的状态，会占用前台。top命令提供了实时的对系统处理器的状态监视.它将显示系统中CPU最“敏感”的任务列表.该命令可以按CPU使用.内存使用和执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定.</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>top [参数]</p><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><ul><li>-b 批处理</li><li>-c 显示完整的命令</li><li>-I 忽略失效的进程</li><li>-s 保密模式</li><li>-S 累计模式</li><li>-d&lt;时间&gt; 设置刷新间隔时间，单位s</li><li>-u&lt;用户名&gt; 指定显示某个用户的</li><li>-p&lt;进程号&gt; 指定显示某个进程的</li><li>-n&lt;次数&gt; 指定循环次数<blockquote><p>当指定了-d参数而没有指定-n参数时，会不断的循环刷新，默认的刷新时间是5s</p></blockquote></li></ul><h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">root@dcLunatic:~# top</span><br><span class="line"></span><br><span class="line">top - 01:02:01 up 11:58,  1 user,  load average: 1.45, 1.27, 0.88</span><br><span class="line">Tasks: 260 total,   2 running, 258 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta">%</span>Cpu(s):  4.1 us,  1.2 sy,  0.0 ni, 94.6 id,  0.0 wa,  0.0 hi,  0.2 si,  0.0 st</span><br><span class="line">MiB Mem :   3834.7 total,    751.4 free,   2192.0 used,    891.4 buff/cache</span><br><span class="line">MiB Swap:   3982.0 total,   3106.7 free,    875.2 used.    986.5 avail Mem </span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                </span><br><span class="line"> 1314 root      20   0 2898636 260680  42968 R   5.6   6.6  42:37.61 gnome-shell            </span><br><span class="line"> 2322 root      20   0  655776 127692  38068 S   5.3   3.3  66:20.56 chrome                 </span><br><span class="line"> 9985 root      20   0  945984 263208 172800 S   5.3   6.7   4:58.68 chrome                 </span><br><span class="line"> 2287 root      20   0 1470104 191996  73624 S   3.6   4.9  60:25.74 chrome                 </span><br><span class="line"> 1135 root      20   0  476540  56436  39240 S   2.0   1.4  24:52.52 Xorg                   </span><br><span class="line"> 1625 root      20   0  283808  15124   4756 S   0.7   0.4   1:28.57 ibus-engine-pin        </span><br><span class="line">    8 root      20   0       0      0      0 I   0.3   0.0   0:46.93 rcu_sched              </span><br><span class="line"> 1236 root      20   0  410500   7568   3408 S   0.3   0.2   3:03.01 ibus-daemon            </span><br><span class="line"> 1264 root      20   0  453988  10424   8188 S   0.3   0.3   1:37.77 ibus-x11               </span><br><span class="line"> 4686 root      20   0  535284  37820  18140 S   0.3   1.0   0:36.24 gnome-terminal-        </span><br><span class="line"> 5090 root      20   0  799096 113792  47004 S   0.3   2.9   1:43.60 chrome                 </span><br><span class="line"> 5105 root      20   0  899760 191356  56888 S   0.3   4.9   0:58.34 chrome                 </span><br><span class="line">10163 root      20   0       0      0      0 D   0.3   0.0   0:02.05 kworker/u8:3           </span><br><span class="line">10224 root      20   0       0      0      0 I   0.3   0.0   0:00.25 kworker/u8:4           </span><br><span class="line">10232 root      20   0   29096   3716   3100 R   0.3   0.1   0:00.03 top                    </span><br><span class="line">    1 root      20   0  206180   4376   3060 S   0.0   0.1   0:44.02 systemd                </span><br><span class="line">    2 root      20   0       0      0      0 S   0.0   0.0   0:00.03 kthreadd</span><br></pre></td></tr></table></figure><h2 id="前五行是当前系统情况的统计信息区"><a href="#前五行是当前系统情况的统计信息区" class="headerlink" title="前五行是当前系统情况的统计信息区"></a>前五行是当前系统情况的统计信息区</h2><ol><li>第一行，任务队列信息，同uptime命令的执行结果，具体参数说明情况如下</li></ol><p><code>top - 01:02:01 up 11:58,  1 user,  load average: 1.45, 1.27, 0.88</code></p><ul><li>01:02:01 当前系统时间</li><li>up 11:58 系统已经运行了11:58时间长了</li><li>1 user 当前有1个用户登录系统</li><li>load average: 1.45, 1.27, 0.88 当前系统的负载统计值，分别是1分钟，5分钟，15分钟的。每5s钟检查一次活跃的进程数，然后按照特定的算法计算出负载情况。如果这个数除以逻辑cpu的数量，结果高于5就表明系统在超负荷运行了</li></ul><ol start="2"><li>第二行，Tasks，任务(进程)，具体信息说明情况如下</li></ol><p><code>Tasks: 260 total,   2 running, 258 sleeping,   0 stopped,   0 zombie</code></p><p>系统现在总共有206个进程，其中处于运行中的有两个，258个在休眠(sleep)，stoped状态的有0个，僵尸进程0个。</p><ol start="3"><li>第三行，%Cpu(s)，cpu状态信息，具体属性说明如下</li></ol><p><code>%Cpu(s):  4.1 us,  1.2 sy,  0.0 ni, 94.6 id,  0.0 wa,  0.0 hi,  0.2 si,  0.0 st</code></p><ul><li>4.1 us 用户空间占用cpu的百分比</li><li>1.2 sy 内核空间占用cpu的百分比</li><li>0.0 ni 改变过优先级的进程占用cpu的百分比</li><li>94.6 id 空闲cpu百分比</li><li>0.0 wa IO等待占用cpu的百分比</li><li>0.0 hi 硬中断(Hardware IRQ)占用cpu的百分比</li><li>0.2 si 软中断(Software Interrupts)占用cpu的百分比</li></ul><ol start="4"><li>第四行，内存状态，具体信息如下</li></ol><p><code>MiB Mem :   3834.7 total,    751.4 free,   2192.0 used,    891.4 buff/cache</code></p><ul><li>3834.7 total 物理内存大小为3834.7M，大概是4G</li><li>751.4 free 空闲的内存总量为751.4M</li><li>2192.0 used 使用中的内存总量为2192.0M</li><li>891.4 buff/cache 缓冲的交换区总量891.4M</li></ul><ol start="5"><li>第五行，swap交换分区信息，具体信息说明如下</li></ol><p><code>MiB Swap:   3982.0 total,   3106.7 free,    875.2 used.    986.5 avail Mem</code></p><ul><li>3982.0 total 总共有3982.0M的交换空间</li><li>3106.7 free 空闲中的交换空间有3106.7M</li><li>875.2 used 使用中的交换空间有875.2M</li><li>986.5 avail 缓冲中的(可利用的)交换空间有986.5M</li></ul><p>使用中的内存总量（used）指的是现在系统内核控制的内存数，空闲内存总量（free）是内核还未纳入其管控范围的数量。纳入内核管理的内存不见得都在使用中，还包括过去使用过的现在可以被重复利用的内存，内核并不把这些可被重新使用的内存交还到free中去，因此在linux上free内存会越来越少，但不用为此担心。</p><ol start="6"><li>第六行，空行，这一行是用来交互实时执行一些东西的。</li><li>第七行，各进程(任务)的状态监控，项目列信息说明如下</li></ol><p><code>PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND</code></p><ul><li>PID 进程的id</li><li>USER 进程所有者</li><li>PR 进程优先级</li><li>NI nice值，负责表示高优先级，正则表示低优先级</li><li>VIRT 进程中使用虚拟内存总量，单位是kb。VIRT=SWAP+RES</li><li>RES 进程中使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</li><li>SHA 共享内存大小，单位kb</li><li>S 进程状态 D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程</li><li>%CPU 上次更新到现在CPU时间占用百分比</li><li>%MEM 进程使用的物理内存占用百分比</li><li>TIME+ 进程使用的CPU时间总计，单位ms</li><li>COMMAND 进程名称或者命令行</li></ul><h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><ol><li>多核cpu监控</li></ol><p>在top的基本视图中，按下键盘数字’1’，可监控每个逻辑cpu的状况</p><p><code>%Cpu(s):  2.7 us,  0.8 sy,  0.0 ni, 96.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</code></p><p>按下1后变成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%Cpu0  :  0.3 us,  0.7 sy,  0.0 ni, 98.7 id,  0.3 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu1  :  0.3 us,  0.7 sy,  0.0 ni, 99.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu2  :  0.3 us,  0.0 sy,  1.0 ni, 98.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu3  :  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br></pre></td></tr></table></figure></p><ol start="2"><li><p>高亮显示当前运行进程</p><ol><li>敲击键盘’b’，打开关闭<code>加亮</code>当前正在running中的进程</li><li>敲击键盘’y’，打开关闭<code>高亮</code>当前正在running中的进程</li></ol></li><li><p>进程显示的字段排序</p><p>默认进入top时，各进程是通过cpu的占用量来排序的。</p><ol><li>敲击键盘’x’，打开关闭排序列的加亮效果</li><li>通过’shift+&lt;’或’shift+&gt;’来左右改变排序列</li></ol></li></ol><h2 id="top交互命令"><a href="#top交互命令" class="headerlink" title="top交互命令"></a>top交互命令</h2><p>在top命令过程中可以使用一些交互命令，这些命令都是单字母的，如果在命令行中使用了s选项，其中一些命令可能会给屏蔽。</p><ul><li>h 显示帮助画面，给出一些简短命令总结说明</li><li>k 终止一个进程</li><li>i 忽略闲置和僵死进程</li><li>q 退出程序</li><li>r 重新安排一个进程的nice值</li><li>S 打开关闭累计模式</li><li>s 改变两次刷新的间隔时间，如果有小数，就换算成ms，输入0表示不断刷新</li><li>f 从当前的显示中添加项目</li><li>F 从当前的显示中删除项目</li><li>I 切换平均负载和启动时间信息</li><li>t 切换显示进程和cpu状态信息</li><li>c 切换显示命令名称和完整命令行</li><li>M 根据驻留内存大小进行排序</li><li>P 根据CPU使用百分比大小进行排序</li><li>T 根据时间/累计时间进行排序</li><li>w 将当前设置写入~/.toprc配置文件中</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;top命令&quot;&gt;&lt;a href=&quot;#top命令&quot; class=&quot;headerlink&quot; title=&quot;top命令&quot;&gt;&lt;/a&gt;top命令&lt;/h1&gt;&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作
      
    
    </summary>
    
    
      <category term="linux" scheme="http://dcLunatic.github.io/tags/linux/"/>
    
      <category term="command" scheme="http://dcLunatic.github.io/tags/command/"/>
    
  </entry>
  
</feed>
